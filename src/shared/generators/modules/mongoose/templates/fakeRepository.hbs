import {{pascalTableName}}, { {{pascalTableName}}Attributes } from '@modules/{{camelCase moduleName}}/infra/mongoose/schemas/{{pascalTableName}}.schema'
import I{{pascalTableName}}, { CreateProps, FindByIdProps, UpdateProps, DeleteProps } from '@modules/{{camelCase moduleName}}/repositories/interfaces/I{{pascalTableName}}.interface'

export default class Fake{{pascalTableName}}Repository implements I{{pascalTableName}} {
  private repository: {{pascalTableName}}Attributes[] = []

  async create ({ content }: CreateProps): Promise<{{pascalTableName}}Attributes> {
    const {{camelCase moduleName}} = new {{pascalTableName}}()

    Object.assign({{camelCase moduleName}}, {
      ...{{camelCase moduleName}},
      content
    })

    this.repository.push({{camelCase moduleName}})

    return {{camelCase moduleName}}
  }

  async findAll (): Promise<{{pascalTableName}}Attributes[]> {
    return this.repository
  }

  async findById ({ id }: FindByIdProps): Promise<{{pascalTableName}}Attributes> {
    return this.repository.find({{camelCase moduleName}} => {{camelCase moduleName}}._id === id)
  }

  async update ({ {{camelCase moduleName}} }: UpdateProps): Promise<{{pascalTableName}}Attributes> {
    const getIndex = this.repository.findIndex(get{{pascalTableName}} => get{{pascalTableName}}._id === {{camelCase moduleName}}._id)

    this.repository[getIndex] = {{camelCase moduleName}}

    return {{camelCase moduleName}}
  }

  async delete ({ id }: DeleteProps): Promise<{{pascalTableName}}Attributes> {
    const {{camelCase moduleName}} = this.repository.find(repo => repo._id === id)

    this.repository = this.repository.filter(repo => repo._id !== id)

    return {{camelCase moduleName}}
  }
}
