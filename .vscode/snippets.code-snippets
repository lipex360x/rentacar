{
	"Template Snippets": {
    "prefix": "snippetTemplate",
    "body": [
      "\"${1:SNIPPET_TITLE}\": {",
      "  \"prefix\": \"${2:PREFIX}\",",
      "  \"body\": [",
      "    \"${3:BODY}\"",
      "  ]",
      "},",
      "",
    ]
  },

	"Swagger Route": {
		"prefix": "swaggerPath",
		"body": [
				"\"/${1:routeName}\": {",
				"  \"${2|get,post,put,path,delete|}\": {",
				"    \"tags\": [\"${3:tagName}\"],",
				"    \"summary\": \"${4:summaryDescription}\",",
				"    \"description\": \"${5:description}\",",
				"    \"requestBody\": {",
				"      \"content\": {",
				"        \"application/json\" :{",
				"          \"schema\":  {",
				"            \"type\": \"object\",",
				"            ",
				"            \"properties\": {",
				"              \"${6:propertyName}\": {",
				"                \"type\": \"${7|string,integer,number,boolean|}\"",
				"              }",
				"            },",
				"",
				"            \"example\": {",
				"              \"${6:propertyName}\": \"${8:propertySample}\"",
				"            }",
				"            ",
				"          }",
				"        }",
				"      }",
				"    },",
				"    \"responses\": {",
				"        \"201\": {          ",
				"          \"description\": \"Created\"",
				"        }",
				"      }",
				"    }",
				"  }",
		]
	},

	"Swagger Verbs": {
		"prefix": "swaggerVerbs",
		"body": [
				"  \"${1|get,post,put,path,delete|}\": {",
				"    \"tags\": [\"${2:tagName}\"],",
				"    \"summary\": \"${3:summaryDescription}\",",
				"    \"description\": \"${4:description}\",",
				"    \"requestBody\": {",
				"      \"content\": {",
				"        \"application/json\" :{",
				"          \"schema\":  {",
				"            \"type\": \"object\",",
				"            ",
				"            \"properties\": {",
				"              \"${5:propertyName}\": {",
				"                \"type\": \"${6|string,integer,number,boolean|}\"",
				"              }",
				"            },",
				"",
				"            \"example\": {",
				"              \"${7:propertyName}\": \"${8:propertySample}\"",
				"            }",
				"",
				"          }",
				"        }",
				"      }",
				"    },",
				"  \"responses\": {",
				"      \"201\": {          ",
				"        \"description\": \"Created\"",
				"      }",
				"    }",
				"  }",
		]
	},

	"Migration Create Table Template": {
		"prefix": "migrationTable",
		"body": [
      "import { MigrationInterface, QueryRunner, Table } from 'typeorm'",
      "",
      "export default class ${1:MigrationName} implements MigrationInterface {",
      "  public async up (queryRunner: QueryRunner): Promise<void> {",
      "    await queryRunner.createTable(",
      "      new Table({",
      "        name: '${2:TABLE_NAME}',",
      "        columns: [",
      "          {",
      "            name: '${3:TABLE_SINGLE_NAME}_id',",
      "            type: 'uuid',",
      "            isPrimary: true",
			"          },",
			"",
      "          {",
      "            name: '${4:COLUMN_NAME}',",
      "            type: '${5|varchar,text,uuid,integer,decimal,boolean|}'",
      "          },",
      "",
      "          {",
      "            name: 'created_at',",
      "            type: 'timestamp with time zone',",
      "            default: 'now()'",
			"          },",
			"",
      "          {",
      "            name: 'updated_at',",
      "            type: 'timestamp with time zone',",
      "            default: 'now()'",
      "          }",
      "",
      "          {",
      "            name: 'deleted_at',",
      "            type: 'timestamp with time zone',",
      "            isNullable: true,",
      "            default: null",
      "          }",
      "        ]",
      "      })",
      "    )",
      "  }",
      "",
      "  public async down (queryRunner: QueryRunner): Promise<void> {",
      "    await queryRunner.dropTable('${2:TABLE_NAME}')",
      "  }",
			"}",
			"",
		]
  },

  "Migration Column": {
		"prefix": "migrationColumn",
		"body": [
      "import { MigrationInterface, QueryRunner, TableColumn } from 'typeorm';",
      "",
      "export default class ${1:MigrationName}",
      "  implements MigrationInterface {",
      "  public async up(queryRunner: QueryRunner): Promise<void> {",
      "    await queryRunner.addColumn(",
      "      '${2:Table Name}',",
      "      new TableColumn({",
      "        name: '${3:Column Name}',",
      "        type: '${4|varchar,integer,boolean,decimal|}',",
      "        isNullable: true,",
      "      }),",
      "    );",
      "  }",
      "",
      "  public async down(queryRunner: QueryRunner): Promise<void> {",
      "    await queryRunner.dropColumn('${2:Table Name}', '${3:Column Name}');",
      "  }",
      "}",
    ]
  },

  "Migration FK Column": {
		"prefix": "migrationForeignKey",
		"body": [
    "import { MigrationInterface, QueryRunner, TableColumn, TableForeignKey } from 'typeorm'",
    "",
    "export default class ${1:MigrationName}",
    "  implements MigrationInterface {",
    "  public async up(queryRunner: QueryRunner): Promise<void> {",
    "",
    "    await queryRunner.addColumn(",
    "      '${2:DATABASE_NAME}',",
    "      new TableColumn({",
    "        name: '${3:COLUMN_NAME}',",
    "        type: 'uuid',",
    "        isNullable: true,",
    "      })",
    "    );",
    "",
    "    await queryRunner.createForeignKey(",
    "      '${2:DATABASE_NAME}',",
    "      new TableForeignKey({",
    "        name: '${2:DATABASE_NAME}_To_${5:REFERENCE_TABLE}',",
    "        columnNames: ['${3:COLUMN_NAME}'],",
    "",
    "        referencedTableName: '${5:REFERENCE_TABLE}',",
    "        referencedColumnNames: ['${3:COLUMN_NAME}'],",
    "",
    "        onDelete: '${6|CASCADE,SET NULL|}',",
    "        onUpdate: '${7|CASCADE,SET NULL|}'",
    "      })",
    "    )",
    "  }",
    "",
    "  public async down(queryRunner: QueryRunner): Promise<void> {",
    "    await queryRunner.dropForeignKey('${2:DATABASE_NAME}', '${2:DATABASE_NAME}_To_${5:REFERENCE_TABLE}');",
    "    await queryRunner.dropColumn('${2:DATABASE_NAME}', '${3:COLUMN_NAME}');",
    "  }",
    "}",
    ]
  },
	
	
}


